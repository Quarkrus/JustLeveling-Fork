buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'com.gradleup.shadow:shadow-gradle-plugin:8.3.0'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.gradleup.shadow'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Cloth Config API
    maven {
        url "https://maven.shedaniel.me/"
    }
    // Player Animation
    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }
    // BetterCombat
    maven {
        url 'https://api.modrinth.com/maven'
    }
    // Curios API
    maven {
        name = "Illusive Soulworks maven"
        url = "https://maven.theillusivec4.top/"
    }
    // YetAnotherConfigLib
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    // Tetra, PointBlank, Tac:Zero & MrCrayfish's Gun Mod
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    flatDir{
        dirs 'libs'
    }
}

configurations {
    shade
    implementation.extendsFrom shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Jackson Core (JSON) implementation
    //compileOnly "com.fasterxml.jackson.core:jackson-core:2.17.2"
    //implementation(jarJar("com.fasterxml.jackson.core:jackson-core:2.17.2"))

    //implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.17.2'
    //implementation "com.fasterxml.jackson.core:jackson-core:2.17.2"

    minecraftLibrary "com.fasterxml.jackson.core:jackson-core:2.17.2"
    shade "com.fasterxml.jackson.core:jackson-core:2.17.2"

    minecraftLibrary "com.fasterxml.jackson.core:jackson-databind:2.17.2"
    shade "com.fasterxml.jackson.core:jackson-databind:2.17.2"

    // Mixin extras implementation
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
        jarJar.ranged(it, "[0.4.1,)")
    }

    // ClothConfig implementation (Required by BetterCombat)
    implementation fg.deobf("curse.maven:cloth-config-348521:4973439")

    // PlayerAnimator implementation (Required by BetterCombat)
    implementation fg.deobf("dev.kosmx.player-anim:player-animation-lib-forge:1.0.2+1.18")

    // BetterCombat implementation
    implementation fg.deobf('maven.modrinth:better-combat:1.6.2+1.18.2-forge')

    // Compile against only the API artifact
    compileOnly(fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.9.2:api"))
    // Use the full Curios API jar at runtime
    runtimeOnly(fg.deobf("top.theillusivec4.curios:curios-forge:1.18.2-5.0.9.2"))

    // YetAnotherConfigLib implementation
    // implementation fg.deobf("dev.isxander:yet-another-config-lib:3.4.2+1.20.1-forge")
    // compileOnly(fg.deobf("dev.isxander:yet-another-config-lib:3.4.2+1.20.1-forge"))

    // Tetra implementation
    compileOnly fg.deobf("curse.maven:tetra-289712:4029100")
    compileOnly fg.deobf("curse.maven:mutil-351914:3788376")

    // Timeless and classics: zero implementation
    compileOnly fg.deobf("curse.maven:timeless-and-classics-zero-1028108:5529108")

    // MrCrayfish's Gun Mod implementation
    compileOnly fg.deobf("curse.maven:mrcrayfishs-gun-mod-289479:4344223")
    runtimeOnly fg.deobf("curse.maven:framework-549225:4613856")

    // Iron's Spells 'n Spellbooks implementation
    compileOnly fg.deobf("curse.maven:irons-spells-n-spellbooks-855414:5275053")
    runtimeOnly fg.deobf("curse.maven:caelus-308989:3650485")

    runtimeOnly fg.deobf("curse.maven:geckolib-388172:4181370")
}

jar {
    archiveClassifier = 'slim'
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
    relocate 'com.fasterxml.jackson.core', 'com.seniors.justlevelingfork.jackson.core'
    finalizedBy 'reobfShadowJar'
}

assemble.dependsOn shadowJar

reobf {
    shadowJar {}
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}